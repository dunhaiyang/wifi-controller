C51 COMPILER V9.54   MIDDLEWARE_DEVICEWHITELIST                                            01/10/2017 18:08:21 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MIDDLEWARE_DEVICEWHITELIST
OBJECT MODULE PLACED IN ..\output\Middleware_DeviceWhiteList.obj
COMPILER INVOKED BY: D:\c51_keil\C51\BIN\C51.EXE SourceFile\MiddlewareWesocket\Middleware_DeviceWhiteList.c LARGE OPTIMI
                    -ZE(8,SPEED) BROWSE INCDIR(.\HeadFile\Arch;.\HeadFile\OS_api;.\HeadFile\KQA_OS;.\HeadFile\App_api;.\HeadFile\App\Command_
                    -Conter;.\HeadFile\App\Command_DataStructure;.\HeadFile\App\Command_Device;.\HeadFile\App\Command_Repeater;.\HeadFile\App
                    -\Command_WhiteList;.\HeadFile\App\Command_Kernel;.\HeadFile\MiddlewareBoardcast;.\HeadFile\MiddlewareWesocket) DEBUG OBJ
                    -ECTEXTEND PRINT(..\listing\Middleware_DeviceWhiteList.lst) OBJECT(..\output\Middleware_DeviceWhiteList.obj)

line level    source

   1          #include "Middleware_DeviceWhiteList.h"
   2          
   3          
   4          uint16_t        DeviceWhiteList_DeviceNo;
   5          
   6          uint8_t         DeviceWhiteList_DeviceType;
   7          
   8          
   9          bool __Operate_WhiteList(uint8_t *router, uint8_t mode, uint8_t len, uint8_t *whiteListData)
  10          {
  11   1              uint8_t         *tmpData = MiddlewareData_Malloc(MiddlewareData_SendDataNormal);
  12   1              
  13   1              uint8_t         index;
  14   1              
  15   1              uint16_t        tmpParityValue;
  16   1              
  17   1              if (!tmpData)
  18   1              {
  19   2                      return 0;
  20   2              }
  21   1              // 设备编号，命令编号， 命令流水号，中继
  22   1              //
  23   1              tmpData[0] = DeviceWhiteList_DeviceNo;
  24   1              tmpData[1] = DeviceWhiteList_DeviceNo >> 8;
  25   1              tmpData[2] = 17;
  26   1              tmpData[4] = router[0];
  27   1              tmpData[5] = router[0];
  28   1              tmpData[6] = router[1];
  29   1              tmpData[7] = router[2];
  30   1              tmpData[8] = 0xE3;
  31   1              if (mode == 'A')
  32   1              {
  33   2                      tmpData[9] = 0x31;
  34   2              }
  35   1              else if (mode == 'U')
  36   1              {
  37   2                      tmpData[9] = 0x32;
  38   2              }
  39   1              else if (mode == 'D')
  40   1              {
  41   2                      tmpData[9] = 0x33;
  42   2              }
  43   1              tmpData[10] = len;
  44   1              
  45   1              for (index = 0; index < len; index++)
  46   1              {
  47   2      //              tmpData[11 + index] = (QuickTransferTable[whiteListData[index * 2 + 0]] << 4) + 
  48   2      //                                                              QuickTransferTable[whiteListData[index * 2 + 1]];
  49   2              }
  50   1              // 计算内校验
  51   1              //
C51 COMPILER V9.54   MIDDLEWARE_DEVICEWHITELIST                                            01/10/2017 18:08:21 PAGE 2   

  52   1              tmpParityValue = Temporary_CalcSumParity(tmpData + 8, 19);
  53   1          tmpData[27] = tmpParityValue;
  54   1          tmpData[28] = tmpParityValue >> 8;
  55   1              
  56   1              
  57   1              // 计算外校验
  58   1              //
  59   1              tmpParityValue = Temporary_CalcSumParity(tmpData, 30);
  60   1          tmpData[Enum_Wirelss_ParityL] = tmpParityValue;
  61   1          tmpData[Enum_Wirelss_ParityH] = tmpParityValue >> 8;
  62   1              
  63   1              return 1;
  64   1      }
*** WARNING C280 IN LINE 9 OF SourceFile\MiddlewareWesocket\Middleware_DeviceWhiteList.c: 'whiteListData': unreferenced 
             -local variable
  65          
  66          
  67          bool __Init_WhiteList(uint8_t *router)
  68          {
  69   1              uint8_t         *tmpData = MiddlewareData_Malloc(MiddlewareData_SendDataNormal);
  70   1              
  71   1              uint16_t        tmpParityValue;
  72   1              
  73   1              if (!tmpData)
  74   1              {
  75   2                      return 0;
  76   2              }
  77   1              // 设备编号，命令编号， 命令流水号，中继
  78   1              //
  79   1              tmpData[0] = DeviceWhiteList_DeviceNo;
  80   1              tmpData[1] = DeviceWhiteList_DeviceNo >> 8;
  81   1              tmpData[2] = 15;
  82   1              tmpData[4] = router[0];
  83   1              tmpData[5] = router[0];
  84   1              tmpData[6] = router[1];
  85   1              tmpData[7] = router[2];
  86   1              tmpData[8] = 0xE1;
  87   1              tmpData[9] = DeviceWhiteList_DeviceNo;
  88   1              tmpData[10] = DeviceWhiteList_DeviceNo >> 8;
  89   1              tmpData[11] = DeviceWhiteList_DeviceType;
  90   1      //      tmpData[12] = WirelessChannel;
  91   1              memset(tmpData + 13, 0xFF, 8);
  92   1              
  93   1              // 内部和校验
  94   1              //
  95   1              tmpParityValue = Temporary_CalcSumParity(tmpData + 8, 13);
  96   1          tmpData[21] = tmpParityValue;
  97   1          tmpData[22] = tmpParityValue >> 8;
  98   1              
  99   1              memset(tmpData + 23, 0xE1, 7);
 100   1              
 101   1              // 计算校验
 102   1              //
 103   1              tmpParityValue = Temporary_CalcSumParity(tmpData, 30);
 104   1          tmpData[Enum_Wirelss_ParityL] = tmpParityValue;
 105   1          tmpData[Enum_Wirelss_ParityH] = tmpParityValue >> 8;
 106   1              
 107   1              printf("to init white list\r\n");
 108   1              
 109   1              return 1;
 110   1      }
 111          
C51 COMPILER V9.54   MIDDLEWARE_DEVICEWHITELIST                                            01/10/2017 18:08:21 PAGE 3   

 112          
 113          bool DeviceWhiteList_DealFrameText(uint8_t **Data)
 114          {
 115   1              uint8_t         router[3];
 116   1              
 117   1              uint8_t         mode;
 118   1              
 119   1              uint8_t         len;
 120   1              
 121   1              uint8_t         *tmpWhiteList;
 122   1              
 123   1              // 获取设备编号
 124   1              //
 125   1              if (!Json_ReceiveFrameUintValue(Data, "dn\":\"", 5, &DeviceWhiteList_DeviceNo))
 126   1              {
 127   2                      return 0;
 128   2              }
 129   1              
 130   1              // 获取设备类型
 131   1              //
 132   1              if (!Json_ReceiveFrameCharValue(Data, "dt\":\"", 5, &DeviceWhiteList_DeviceType))
 133   1              {
 134   2                      return 0;
 135   2              }
 136   1              
 137   1              // 从设备列表中查找路由信息
 138   1              //
 139   1      //      if (!DeviceInfo_GetRouter(DeviceWhiteList_DeviceNo, DeviceWhiteList_DeviceType, router))
 140   1      //      {
 141   1      //              return 0;
 142   1      //      }
 143   1              
 144   1              // 获取操作模式
 145   1              //
 146   1              if (!Json_ReceiveFrameFirstbyteValue(Data, "mode\":\"", 7, &mode))
 147   1              {
 148   2                      return 0;
 149   2              }
 150   1              
 151   1              switch (mode)
 152   1              {
 153   2                      case 'A':
 154   2                      case 'D':
 155   2                      case 'U':
 156   2                              // 获取名单长度
 157   2                              //
 158   2                              if (!Json_ReceiveFrameCharValue(Data, "len\":\"", 6, &len))
 159   2                              {
 160   3                                      return 0;
 161   3                              }
 162   2                              
 163   2                              // 获取名单数据
 164   2                              //
 165   2                              if (!Json_ReceiveFrameStringValue(Data, "wd\":[", 5, &tmpWhiteList))
 166   2                              {
 167   3                                      return 0;
 168   3                              }
 169   2                              while (*tmpWhiteList == '"')
 170   2                              {
 171   3                                      // 跳过引号
 172   3                                      //
 173   3                                      tmpWhiteList++;
C51 COMPILER V9.54   MIDDLEWARE_DEVICEWHITELIST                                            01/10/2017 18:08:21 PAGE 4   

 174   3                                      
 175   3                                      // 获取数据
 176   3                                      //
 177   3                                      if (!__Operate_WhiteList(router, mode, len, tmpWhiteList))
 178   3                                      {
 179   4                                              MiddlewareData_Empty_SendDataNormal();
 180   4                                              
 181   4                                              return 0;
 182   4                                      }
 183   3                                      // 跳过已经获取到的数据
 184   3                                      //
 185   3                                      tmpWhiteList = tmpWhiteList + 2 * len;
 186   3                                      
 187   3                                      // 跳过两个字符
 188   3                                      //
 189   3                                      tmpWhiteList += 2;
 190   3                              }
 191   2                              break;
 192   2                      
 193   2                      case 'I':
 194   2                              if (!__Init_WhiteList(router))
 195   2                              {
 196   3                                      return 0;
 197   3                              }
 198   2                              break;
 199   2                              
 200   2                      default:
 201   2                              return 0;
 202   2              }
 203   1              
 204   1              return 1;
 205   1      }
 206          
 207          
 208          void DeviceWhiteList_SendFrameTextToPc(uint16_t cmdSerialNo, uint8_t *Data)
 209          {
 210   1              uint16_t        tmpDataLen = 0;
 211   1              
 212   1              // websocket前缀
 213   1              //
 214   1              Data[tmpDataLen++] = 0x81;
 215   1              
 216   1              Data[tmpDataLen++] = 0xFE;
 217   1              
 218   1              // 负载长度字段
 219   1              //
 220   1              Data[tmpDataLen++] = 0x00;
 221   1              
 222   1              Data[tmpDataLen++] = 0x00;
 223   1              
 224   1              // 添加掩码
 225   1              //
 226   1              Data[tmpDataLen++] = 0x00;
 227   1              
 228   1              Data[tmpDataLen++] = 0x00;
 229   1              
 230   1              Data[tmpDataLen++] = 0x00;
 231   1              
 232   1              Data[tmpDataLen++] = 0x00;
 233   1              
 234   1              // 负载数据内容: 指令号和序列号
 235   1              //
C51 COMPILER V9.54   MIDDLEWARE_DEVICEWHITELIST                                            01/10/2017 18:08:21 PAGE 5   

 236   1              memcpy(Data + tmpDataLen, "{\"cn\":\"011\",\"csn\":\"", 19);
 237   1              tmpDataLen += 19;
 238   1              
 239   1              Data[tmpDataLen++] = cmdSerialNo / 10000 + '0';
 240   1              Data[tmpDataLen++] = cmdSerialNo / 1000 % 10 + '0';
 241   1              Data[tmpDataLen++] = cmdSerialNo / 100 % 10 + '0';
 242   1              Data[tmpDataLen++] = cmdSerialNo / 10 % 10 + '0';
 243   1              Data[tmpDataLen++] = cmdSerialNo % 10 + '0';
 244   1              
 245   1              // 添加了设备编号
 246   1              //
 247   1              memcpy(Data + tmpDataLen, "\",\"dn\":\"", 8);
 248   1              tmpDataLen += 8;
 249   1              
 250   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceNo / 10000 + '0';
 251   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceNo / 1000 % 10 + '0';
 252   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceNo / 100 % 10 + '0';
 253   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceNo / 10 % 10 + '0';
 254   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceNo % 10 + '0';
 255   1              
 256   1              // 添加了设备类型
 257   1              //
 258   1              memcpy(Data + tmpDataLen, "\",\"dt\":\"", 8);
 259   1              tmpDataLen += 8;
 260   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceType / 100 % 10 + '0';
 261   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceType / 10 % 10 + '0';
 262   1              Data[tmpDataLen++] = DeviceWhiteList_DeviceType % 10 + '0';
 263   1              
 264   1              // 应答结果
 265   1              //
 266   1              memcpy(Data + tmpDataLen, "\",\"rcheck\":true}", 16);
 267   1              
 268   1              tmpDataLen += 16;
 269   1              
 270   1              // 清楚所有结果
 271   1              //
 272   1              MiddlewareData_Empty_ReceiveDataNormal();
 273   1              
 274   1              // 负载长度字段
 275   1              //
 276   1              Data[2] = (tmpDataLen - 8) >> 8;
 277   1              
 278   1              Data[3] = (tmpDataLen - 8) ;
 279   1              
 280   1      //      Ch395_Write(peerSockfd, Data, tmpDataLen);
 281   1      }
 282          
 283          
 284          
 285          
 286          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2206    ----
   CONSTANT SIZE    =    109    ----
   XDATA SIZE       =      3      35
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.54   MIDDLEWARE_DEVICEWHITELIST                                            01/10/2017 18:08:21 PAGE 6   


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
