C51 COMPILER V9.54   PC                                                                    01/18/2017 12:57:27 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PC
OBJECT MODULE PLACED IN ..\output\Pc.obj
COMPILER INVOKED BY: D:\c51_keil\C51\BIN\C51.EXE SourceFile\App\Command_Kernel\Pc.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDI
                    -R(.\HeadFile\Arch;.\HeadFile\OS_api;.\HeadFile\KQA_OS;.\HeadFile\App_api;.\HeadFile\App\Command_Conter;.\HeadFile\App\Co
                    -mmand_DataStructure;.\HeadFile\App\Command_Device;.\HeadFile\App\Command_Repeater;.\HeadFile\App\Command_WhiteList;.\Hea
                    -dFile\App\Command_Kernel;.\HeadFile\MiddlewareBoardcast;.\HeadFile\MiddlewareMenu;.\HeadFile\MiddlewareTask;.\HeadFile\M
                    -iddlewareWireless;.\HeadFile\MiddlewareSocket;.\HeadFile\MiddlewareWesocket) DEBUG OBJECTEXTEND PRINT(..\listing\Pc.lst)
                    - OBJECT(..\output\Pc.obj)

line level    source

   1          #include "Pc.h"
   2          
   3          
   4          uint8_t NRF905_SendBuffer[32];
   5          
   6          
   7          bool Wireless_CheckCommand(uint8_t *command)
   8          {
   9   1          uint8_t     i;
  10   1          uint16_t    parityValue = 0;
  11   1          
  12   1          // ¼ÆËãºÍÐ£ÑéÖµ
  13   1          //
  14   1          for (i = 0; i < COM_CHECKSUM_L; ++i)
  15   1          {
  16   2              parityValue += command[i];
  17   2          }
  18   1          
  19   1          if(((parityValue >> 8) == command[COM_CHECKSUM_H]) && ((parityValue & 0xFF) == command[COM_CHECKSUM_L]
             -))
  20   1          {
  21   2              if( ((command[CMD_NAME] % 2) == 0) && (command[AIM_RELAY] == 0))   //Ó¦´ðÃüÁî,²¢ÇÒÄ¿µÄÖÐ¼ÌÎª0
  22   2              {
  23   3                  return 1;
  24   3              }
  25   2          }
  26   1          return 0;
  27   1      }
  28          
  29          
  30          bool PC_CheckCommand(uint8_t *command, uint16_t commandLen)
  31          {
  32   1          uint8_t             i;
  33   1          uint16_t    sumParityValue = 0;
  34   1          uint8_t             tmpLen = command[2] + 5;
  35   1          
  36   1          
  37   1          // Êý¾Ý×Ö½ÚÊýÁ¿ÊÇ·ñºÏ·¨, ÒÑ¾­È¥µô°üÍ·£¬°üÎ²ÒÔ¼°×ªÒå×Ö·û0x10, ÃüÁîºÅ£¨1£©+ÃüÁîÁ÷Ë®ºÅ£¨1£©+ÃüÁîÄÚÈÝ³¤¶È£
             -¨1£©+ ÃüÁîÄÚÈÝ£¨N) +Òì»òÐ£Ñé×Ö£¨1£©
  38   1          //
  39   1          if (tmpLen != commandLen)
  40   1          {
  41   2              // ´òÓ¡ºÍÐ£Ñé£¬ÓÃÓÚµ÷ÊÔ
  42   2      //              #ifdef  Uart1_Debug
  43   2      //                      Uart1_SendByte(tmpLen); Uart1_SendByte(Uart2_RxBufCount); Uart1_SendByte(0xDD); Uart1_SendByte(0xDD);
  44   2      //              #endif
  45   2                      
  46   2      //              printf("tmpLen: %u, commandLen: %u\r\n", tmpLen, commandLen);
  47   2              
  48   2              return 0;
C51 COMPILER V9.54   PC                                                                    01/18/2017 12:57:27 PAGE 2   

  49   2          }
  50   1          
  51   1          // ºÍÐ£Ñé
  52   1          //
  53   1          for (i = 0; i < tmpLen - 2; ++i)
  54   1          {
  55   2              sumParityValue += command[i];
  56   2          }
  57   1          
  58   1          // ´òÓ¡ºÍÐ£Ñé£¬ÓÃÓÚµ÷ÊÔ
  59   1      //      #ifdef  Uart1_Debug
  60   1      //              Uart1_SendByte(sumParityValue); Uart1_SendByte(sumParityValue >> 8);
  61   1      //      #endif
  62   1          
  63   1          if ((sumParityValue & 0xFF) != command[tmpLen - 2] || (sumParityValue >> 8) != command[tmpLen - 1])
  64   1          {
  65   2      //              #ifdef  Uart1_Debug
  66   2      //                      Uart1_SendByte(0xEE);Uart1_SendByte(0xEE);
  67   2      //              #endif
  68   2                      
  69   2      //              printf("sumParityValue: %u\r\n", sumParityValue);
  70   2              
  71   2              return 0;
  72   2          }
  73   1          
  74   1      //    // ´òÓ¡ºÍÐ£Ñé£¬ÓÃÓÚµ÷ÊÔ
  75   1      //      #ifdef  Uart1_Debug
  76   1      //              Uart1_SendByte(0xFF); Uart1_SendByte(0xFF);
  77   1      //      #endif
  78   1          
  79   1          
  80   1          return 1;
  81   1      }
  82          
  83          
  84          void PC_SendCommand(uint8_t commandNo, uint8_t commandSerialNo, uint8_t *commandContent, uint8_t commandCo
             -ntentLen)
  85          {
  86   1          uint8_t   i;
  87   1          uint16_t  parityValue = 0;
  88   1          uint8_t   tmpParityValueL;
  89   1          uint8_t   tmpParityValueH;
  90   1              uint8_t   tmpSendBufferLen = 0;
  91   1          
  92   1          // ·¢ËÍ°üÍ·£º0x02
  93   1          //
  94   1              __SocketData_SendBuffer[tmpSendBufferLen++] = 0x02;
  95   1          
  96   1          
  97   1          // ·¢ËÍÃüÁîºÅ
  98   1          //
  99   1          if (commandNo == 0x02 || commandNo == 0x03 || commandNo == 0x10)
 100   1          {
 101   2                      __SocketData_SendBuffer[tmpSendBufferLen++] = 0x10;
 102   2          }
 103   1              __SocketData_SendBuffer[tmpSendBufferLen++] = commandNo;
 104   1          
 105   1          // ·¢ËÍÃüÁîÁ÷Ë®ºÅ
 106   1          //
 107   1          if (commandSerialNo == 0x02 || commandSerialNo == 0x03 || commandSerialNo == 0x10)
 108   1          {
 109   2                      __SocketData_SendBuffer[tmpSendBufferLen++] = 0x10;
C51 COMPILER V9.54   PC                                                                    01/18/2017 12:57:27 PAGE 3   

 110   2          }
 111   1              __SocketData_SendBuffer[tmpSendBufferLen++] = commandSerialNo;
 112   1          
 113   1          
 114   1          // ·¢ËÍÃüÁî³¤¶È
 115   1          //
 116   1          if (commandContentLen == 0x02 || commandContentLen == 0x03 || commandContentLen == 0x10)
 117   1          {
 118   2                      __SocketData_SendBuffer[tmpSendBufferLen++] = 0x10;
 119   2          }
 120   1              __SocketData_SendBuffer[tmpSendBufferLen++] = commandContentLen;
 121   1          
 122   1          
 123   1          // ·¢ËÍÃüÁîÄÚÈÝ, ³ýÁË×ªÒå×Ö·û×Ü¹²32×Ö½Ú
 124   1          //
 125   1          parityValue += commandNo;
 126   1          parityValue += commandSerialNo;
 127   1          parityValue += commandContentLen;
 128   1          
 129   1          for (i = 0; i < commandContentLen; ++i)
 130   1          {
 131   2              if (commandContent[i] == 0x02 || commandContent[i] == 0x03 || commandContent[i] == 0x10)
 132   2              {
 133   3                              __SocketData_SendBuffer[tmpSendBufferLen++] = 0x10;
 134   3              }
 135   2                      __SocketData_SendBuffer[tmpSendBufferLen++] = commandContent[i];
 136   2              
 137   2              parityValue += commandContent[i];
 138   2          }
 139   1          
 140   1          // ·¢ËÍÐ£Ñé×Ö(µÍÎ»Ç°£¬¸ßÎ»ºó)
 141   1          //
 142   1          tmpParityValueL = parityValue;
 143   1          
 144   1          if (tmpParityValueL == 0x02 || tmpParityValueL == 0x03 || tmpParityValueL == 0x10)
 145   1          {
 146   2                      __SocketData_SendBuffer[tmpSendBufferLen++] = 0x10;
 147   2          }
 148   1              __SocketData_SendBuffer[tmpSendBufferLen++] = tmpParityValueL;
 149   1          
 150   1          tmpParityValueH = parityValue >> 8;
 151   1          
 152   1          if (tmpParityValueH == 0x02 || tmpParityValueH == 0x03 || tmpParityValueH == 0x10)
 153   1          {
 154   2                      __SocketData_SendBuffer[tmpSendBufferLen++] = 0x10;
 155   2          }
 156   1              __SocketData_SendBuffer[tmpSendBufferLen++] = tmpParityValueH;
 157   1          
 158   1          
 159   1          // ·¢ËÍ°üÎ²
 160   1          //
 161   1              __SocketData_SendBuffer[tmpSendBufferLen++] = 0x03;
 162   1      
 163   1      #ifdef  USING_MODULE_WIFI
                      
                      App_Hal_Api.wifi->write(__SocketData_SendBuffer, tmpSendBufferLen);
                      
              #endif
 168   1              
 169   1      #ifdef  USING_MODULE_NETWORK
 170   1              
 171   1              App_Hal_Api.network->writeUdp(__SocketData_SendBuffer, tmpSendBufferLen);
C51 COMPILER V9.54   PC                                                                    01/18/2017 12:57:27 PAGE 4   

 172   1              
 173   1      #endif
 174   1      }
 175          
 176          
 177          void PC_SendCommand_Boardcast(uint8_t commandNo, uint8_t commandSerialNo, uint8_t *commandContent, uint8_t
             - commandContentLen)
 178          {
 179   1          uint8_t   i;
 180   1          uint16_t  parityValue = 0;
 181   1          uint8_t   tmpParityValueL;
 182   1          uint8_t   tmpParityValueH;
 183   1              uint8_t   tmpSendBufferLen = 0;
 184   1          
 185   1          // ·¢ËÍ°üÍ·£º0x02
 186   1          //
 187   1              __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x02;
 188   1          
 189   1          
 190   1          // ·¢ËÍÃüÁîºÅ
 191   1          //
 192   1          if (commandNo == 0x02 || commandNo == 0x03 || commandNo == 0x10)
 193   1          {
 194   2                      __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x10;
 195   2          }
 196   1              __BoardcastData_SendBuffer[tmpSendBufferLen++] = commandNo;
 197   1          
 198   1          // ·¢ËÍÃüÁîÁ÷Ë®ºÅ
 199   1          //
 200   1          if (commandSerialNo == 0x02 || commandSerialNo == 0x03 || commandSerialNo == 0x10)
 201   1          {
 202   2                      __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x10;
 203   2          }
 204   1              __BoardcastData_SendBuffer[tmpSendBufferLen++] = commandSerialNo;
 205   1          
 206   1          
 207   1          // ·¢ËÍÃüÁî³¤¶È
 208   1          //
 209   1          if (commandContentLen == 0x02 || commandContentLen == 0x03 || commandContentLen == 0x10)
 210   1          {
 211   2                      __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x10;
 212   2          }
 213   1              __BoardcastData_SendBuffer[tmpSendBufferLen++] = commandContentLen;
 214   1          
 215   1          
 216   1          // ·¢ËÍÃüÁîÄÚÈÝ, ³ýÁË×ªÒå×Ö·û×Ü¹²32×Ö½Ú
 217   1          //
 218   1          parityValue += commandNo;
 219   1          parityValue += commandSerialNo;
 220   1          parityValue += commandContentLen;
 221   1          
 222   1          for (i = 0; i < commandContentLen; ++i)
 223   1          {
 224   2              if (commandContent[i] == 0x02 || commandContent[i] == 0x03 || commandContent[i] == 0x10)
 225   2              {
 226   3                              __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x10;
 227   3              }
 228   2                      __BoardcastData_SendBuffer[tmpSendBufferLen++] = commandContent[i];
 229   2              
 230   2              parityValue += commandContent[i];
 231   2          }
 232   1          
C51 COMPILER V9.54   PC                                                                    01/18/2017 12:57:27 PAGE 5   

 233   1          // ·¢ËÍÐ£Ñé×Ö(µÍÎ»Ç°£¬¸ßÎ»ºó)
 234   1          //
 235   1          tmpParityValueL = parityValue;
 236   1          
 237   1          if (tmpParityValueL == 0x02 || tmpParityValueL == 0x03 || tmpParityValueL == 0x10)
 238   1          {
 239   2                      __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x10;
 240   2          }
 241   1              __BoardcastData_SendBuffer[tmpSendBufferLen++] = tmpParityValueL;
 242   1          
 243   1          tmpParityValueH = parityValue >> 8;
 244   1          
 245   1          if (tmpParityValueH == 0x02 || tmpParityValueH == 0x03 || tmpParityValueH == 0x10)
 246   1          {
 247   2                      __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x10;
 248   2          }
 249   1              __BoardcastData_SendBuffer[tmpSendBufferLen++] = tmpParityValueH;
 250   1          
 251   1          
 252   1          // ·¢ËÍ°üÎ²
 253   1          //
 254   1              __BoardcastData_SendBuffer[tmpSendBufferLen++] = 0x03;
 255   1      
 256   1      #ifdef  USING_MODULE_NETWORK
 257   1              
 258   1              App_Hal_Api.network->writeBoardcast(__BoardcastData_SendBuffer, tmpSendBufferLen);
 259   1              
 260   1      #endif
 261   1      }
 262          
 263          
 264          
 265          
 266          
 267          
 268          
 269          
 270          
 271          
 272          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1305    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     32      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
