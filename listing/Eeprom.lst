C51 COMPILER V9.54   EEPROM                                                                01/18/2017 11:05:44 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN ..\output\Eeprom.obj
COMPILER INVOKED BY: D:\c51_keil\C51\BIN\C51.EXE SourceFile\Arch\Eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\HeadFi
                    -le\Arch;.\HeadFile\OS_api;.\HeadFile\KQA_OS;.\HeadFile\App_api;.\HeadFile\App\Command_Conter;.\HeadFile\App\Command_Data
                    -Structure;.\HeadFile\App\Command_Device;.\HeadFile\App\Command_Repeater;.\HeadFile\App\Command_WhiteList;.\HeadFile\App\
                    -Command_Kernel;.\HeadFile\MiddlewareBoardcast;.\HeadFile\MiddlewareMenu;.\HeadFile\MiddlewareTask;.\HeadFile\MiddlewareW
                    -ireless;.\HeadFile\MiddlewareSocket;.\HeadFile\MiddlewareWesocket) DEBUG OBJECTEXTEND PRINT(..\listing\Eeprom.lst) OBJEC
                    -T(..\output\Eeprom.obj)

line level    source

   1          #include "Eeprom.h"
   2          
   3          
   4          
   5          
   6          void IAP_Disable()
   7          {
   8   1          //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
   9   1          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  10   1          IAP_CONTR = 0;      //关闭IAP 功能
  11   1          IAP_CMD   = 0;      //清命令寄存器,使命令寄存器无命令,此句可不用
  12   1          IAP_TRIG  = 0;      //清命令触发寄存器,使命令触发寄存器无触发,此句可不用
  13   1          IAP_ADDRH = 0xff;
  14   1          IAP_ADDRL = 0xff;
  15   1      }
  16          
  17          
  18          //sfr IAP_DATA    = 0xC2;
  19          //sfr IAP_ADDRH   = 0xC3;
  20          //sfr IAP_ADDRL   = 0xC4;
  21          //sfr IAP_CMD     = 0xC5;
  22          //sfr IAP_TRIG    = 0xC6;
  23          //sfr IAP_CONTR   = 0xC7;
  24          
  25          //定义Flash 操作等待时间及允许IAP/ISP/EEPROM 操作的常数
  26          //#define ENABLE_ISP 0x80 //系统工作时钟<30MHz 时，对IAP_CONTR 寄存器设置此值
  27          #define ENABLE_ISP 0x81 //系统工作时钟<24MHz 时，对IAP_CONTR 寄存器设置此值
  28          //#define ENABLE_ISP 0x82 //系统工作时钟<20MHz 时，对IAP_CONTR 寄存器设置此值
  29          //#define ENABLE_ISP 0x83 //系统工作时钟<12MHz 时，对IAP_CONTR 寄存器设置此值
  30          //#define ENABLE_ISP 0x84 //系统工作时钟<6MHz 时，对IAP_CONTR 寄存器设置此值
  31          //#define ENABLE_ISP 0x85 //系统工作时钟<3MHz 时，对IAP_CONTR 寄存器设置此值
  32          //#define ENABLE_ISP 0x86 //系统工作时钟<2MHz 时，对IAP_CONTR 寄存器设置此值
  33          //#define ENABLE_ISP 0x87 //系统工作时钟<1MHz 时，对IAP_CONTR 寄存器设置此值
  34          
  35          //#define DEBUG_DATA               0x5A  //本测试程序最终存储在 EEPROM 单元的数值
  36          //#define DATA_FLASH_START_ADDRESS 0x00  //STC5Axx 系列 EEPROM 测试起始地址
  37          
  38          union union_temp16
  39          {
  40              uint16_t un_temp16;
  41                  
  42              uint8_t  un_temp8[2];
  43                  
  44          } my_unTemp16;
  45          
  46          
  47          //读一字节，调用前需打开IAP 功能，入口:DPTR = 字节地址，返回:A = 读出字节
  48          //
  49          uint8_t Byte_Read( uint16_t add )
  50          {
C51 COMPILER V9.54   EEPROM                                                                01/18/2017 11:05:44 PAGE 2   

  51   1          IAP_DATA = 0x00;
  52   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  53   1          IAP_CMD = 0x01;                 //IAP/ISP/EEPROM 字节读命令
  54   1      
  55   1          my_unTemp16.un_temp16 = add;
  56   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  57   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  58   1      
  59   1          //EA = 0;
  60   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  61   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  62   1          _nop_();
  63   1          //EA = 1;
  64   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  65   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  66   1          return (IAP_DATA);
  67   1      }
  68          
  69          //字节编程，调用前需打开IAP 功能，入口:DPTR = 字节地址, A= 须编程字节的数据
  70          //
  71          void Byte_Program( uint16_t add, uint8_t ch )
  72          {
  73   1          IAP_CONTR = ENABLE_ISP;         //打开 IAP 功能, 设置Flash 操作等待时间
  74   1          IAP_CMD = 0x02;                 //IAP/ISP/EEPROM 字节编程命令
  75   1      
  76   1          my_unTemp16.un_temp16 = add;
  77   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  78   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
  79   1      
  80   1          IAP_DATA = ch;                  //要编程的数据先送进IAP_DATA 寄存器
  81   1          //EA = 0;
  82   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
  83   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
  84   1          _nop_();
  85   1          //EA = 1;
  86   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
  87   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
  88   1      }
  89          
  90          //擦除扇区, 入口:DPTR = 扇区地址
  91          //
  92          void Sector_Erase( uint16_t add )
  93          {
  94   1          IAP_CONTR = ENABLE_ISP;         //打开IAP 功能, 设置Flash 操作等待时间
  95   1          IAP_CMD = 0x03;                 //IAP/ISP/EEPROM 扇区擦除命令
  96   1      
  97   1          my_unTemp16.un_temp16 = add;
  98   1          IAP_ADDRH = my_unTemp16.un_temp8[0];    //设置目标单元地址的高8 位地址
  99   1          IAP_ADDRL = my_unTemp16.un_temp8[1];    //设置目标单元地址的低8 位地址
 100   1      
 101   1          //EA = 0;
 102   1          IAP_TRIG = 0x5A;   //先送 5Ah,再送A5h 到ISP/IAP 触发寄存器,每次都需如此
 103   1          IAP_TRIG = 0xA5;   //送完A5h 后，ISP/IAP 命令立即被触发起动
 104   1          _nop_();
 105   1          //EA = 1;
 106   1          IAP_Disable();  //关闭IAP 功能, 清相关的特殊功能寄存器,使CPU 处于安全状态,
 107   1                          //一次连续的IAP 操作完成之后建议关闭IAP 功能,不需要每次都关
 108   1      }
 109          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.54   EEPROM                                                                01/18/2017 11:05:44 PAGE 3   

   CODE SIZE        =    126    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
