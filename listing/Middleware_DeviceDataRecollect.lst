C51 COMPILER V9.54   MIDDLEWARE_DEVICEDATARECOLLECT                                        01/10/2017 18:08:21 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MIDDLEWARE_DEVICEDATARECOLLECT
OBJECT MODULE PLACED IN ..\output\Middleware_DeviceDataRecollect.obj
COMPILER INVOKED BY: D:\c51_keil\C51\BIN\C51.EXE SourceFile\MiddlewareWesocket\Middleware_DeviceDataRecollect.c LARGE OP
                    -TIMIZE(8,SPEED) BROWSE INCDIR(.\HeadFile\Arch;.\HeadFile\OS_api;.\HeadFile\KQA_OS;.\HeadFile\App_api;.\HeadFile\App\Comm
                    -and_Conter;.\HeadFile\App\Command_DataStructure;.\HeadFile\App\Command_Device;.\HeadFile\App\Command_Repeater;.\HeadFile
                    -\App\Command_WhiteList;.\HeadFile\App\Command_Kernel;.\HeadFile\MiddlewareBoardcast;.\HeadFile\MiddlewareWesocket) DEBUG
                    - OBJECTEXTEND PRINT(..\listing\Middleware_DeviceDataRecollect.lst) OBJECT(..\output\Middleware_DeviceDataRecollect.obj)

line level    source

   1          #include "Middleware_DeviceDataRecollect.h"
   2          
   3          
   4          uint16_t        DeviceDataRecollect_DeviceNo;
   5          
   6          
   7          uint8_t         DeviceDataRecollect_Type;
   8          
   9          
  10          bit __DeviceDataRecollect(uint8_t *router, uint8_t mode)
  11          {
  12   1              uint8_t         *tmpData = MiddlewareData_Malloc(MiddlewareData_SendDataNormal);
  13   1              
  14   1              uint16_t        tmpParityValue;
  15   1              
  16   1              if (!tmpData)
  17   1              {
  18   2                      return 0;
  19   2              }
  20   1              // 设备编号，命令编号， 命令流水号，中继
  21   1              //
  22   1              tmpData[0] = DeviceDataRecollect_DeviceNo;
  23   1              tmpData[1] = DeviceDataRecollect_DeviceNo >> 8;
  24   1              tmpData[2] = 27;
  25   1              tmpData[4] = router[0];
  26   1              tmpData[5] = router[0];
  27   1              tmpData[6] = router[1];
  28   1              tmpData[7] = router[2];
  29   1              tmpData[8] = 0xD1;
  30   1              
  31   1              // 设备编号
  32   1              //
  33   1              tmpData[9] = DeviceDataRecollect_DeviceNo;
  34   1              tmpData[10] = DeviceDataRecollect_DeviceNo >> 8;
  35   1              
  36   1              // 设备类型
  37   1              //
  38   1              tmpData[11] = DeviceDataRecollect_Type;
  39   1              
  40   1              // 无线信道
  41   1              //
  42   1      //      tmpData[12] = WirelessChannel;
  43   1              
  44   1              // 设备序列号
  45   1              //
  46   1              memset(tmpData + 13, 0xFF, 8);
  47   1              
  48   1              // 内部和校验
  49   1          //
  50   1          tmpParityValue = Temporary_CalcSumParity(tmpData + 8, 13);
  51   1          tmpData[21] = tmpParityValue;
C51 COMPILER V9.54   MIDDLEWARE_DEVICEDATARECOLLECT                                        01/10/2017 18:08:21 PAGE 2   

  52   1          tmpData[22] = tmpParityValue >> 8;
  53   1              
  54   1              // 填充字节
  55   1              //
  56   1      //      memset(tmpData + 23, 0xD1, 7);
  57   1          
  58   1          // 外部和校验
  59   1          //
  60   1          tmpParityValue = Temporary_CalcSumParity(tmpData, 30);
  61   1          tmpData[Enum_Wirelss_ParityL] = tmpParityValue;
  62   1          tmpData[Enum_Wirelss_ParityH] = tmpParityValue >> 8;
  63   1              
  64   1              return 1;
  65   1      }
*** WARNING C280 IN LINE 10 OF SourceFile\MiddlewareWesocket\Middleware_DeviceDataRecollect.c: 'mode': unreferenced loca
             -l variable
  66          
  67          
  68          bool DeviceDataRecollect_DealFrameText(uint8_t **Data)
  69          {
  70   1              uint8_t router[3];
  71   1              
  72   1              uint8_t mode;
  73   1              
  74   1              // 获取设备编号
  75   1              //
  76   1              if (!Json_ReceiveFrameUintValue(Data, "dn\":\"", 5, &DeviceDataRecollect_DeviceNo))
  77   1              {
  78   2                      return 0;
  79   2              }
  80   1              
  81   1              // 获取设备类型
  82   1              //
  83   1              if (!Json_ReceiveFrameCharValue(Data, "dt\":\"", 5, &DeviceDataRecollect_Type))
  84   1              {
  85   2                      return 0;
  86   2              }
  87   1              
  88   1              // 从设备列表中查找路由信息
  89   1              //
  90   1      //      if (!DeviceInfo_GetRouter(DeviceDataRecollect_DeviceNo, DeviceDataRecollect_Type, router))
  91   1      //      {
  92   1      //              return 0;
  93   1      //      }
  94   1              
  95   1              // 获取指令长度
  96   1              //
  97   1              if (!Json_ReceiveFrameFirstbyteValue(Data, "mode\":\"", 7, &mode))
  98   1              {
  99   2                      return 0;
 100   2              }
 101   1              
 102   1              __DeviceDataRecollect(router, mode);
 103   1              
 104   1              return 1;
 105   1      }
 106          
 107          
 108          void DeviceDataRecollect_SendFrameTextToPc(uint16_t cmdSerialNo, uint8_t *Data)
 109          {
 110   1              uint16_t  tmpDataLen = 0;
 111   1              
C51 COMPILER V9.54   MIDDLEWARE_DEVICEDATARECOLLECT                                        01/10/2017 18:08:21 PAGE 3   

 112   1              // websocket前缀
 113   1              //
 114   1              Data[tmpDataLen++] = 0x81;
 115   1              
 116   1              Data[tmpDataLen++] = 0xFE;
 117   1              
 118   1              // 负载长度字段
 119   1              //
 120   1              Data[tmpDataLen++] = 0x00;
 121   1              
 122   1              Data[tmpDataLen++] = 0x00;
 123   1              
 124   1              // 添加掩码
 125   1              //
 126   1              Data[tmpDataLen++] = 0x00;
 127   1              
 128   1              Data[tmpDataLen++] = 0x00;
 129   1              
 130   1              Data[tmpDataLen++] = 0x00;
 131   1              
 132   1              Data[tmpDataLen++] = 0x00;
 133   1              
 134   1              // 负载数据内容: 指令号和序列号
 135   1              //
 136   1              memcpy(Data + tmpDataLen, "{\"cn\":\"012\",\"csn\":\"", 19);
 137   1              tmpDataLen += 19;
 138   1              
 139   1              Data[tmpDataLen++] = cmdSerialNo / 10000 + '0';
 140   1              Data[tmpDataLen++] = cmdSerialNo / 1000 % 10 + '0';
 141   1              Data[tmpDataLen++] = cmdSerialNo / 100 % 10 + '0';
 142   1              Data[tmpDataLen++] = cmdSerialNo / 10 % 10 + '0';
 143   1              Data[tmpDataLen++] = cmdSerialNo % 10 + '0';
 144   1              
 145   1              // 添加了设备编号
 146   1              //
 147   1              memcpy(Data + tmpDataLen, "\",\"dn\":\"", 8);
 148   1              tmpDataLen += 8;
 149   1              
 150   1              Data[tmpDataLen++] = DeviceDataRecollect_DeviceNo / 10000 + '0';
 151   1              Data[tmpDataLen++] = DeviceDataRecollect_DeviceNo / 1000 % 10 + '0';
 152   1              Data[tmpDataLen++] = DeviceDataRecollect_DeviceNo / 100 % 10 + '0';
 153   1              Data[tmpDataLen++] = DeviceDataRecollect_DeviceNo / 10 % 10 + '0';
 154   1              Data[tmpDataLen++] = DeviceDataRecollect_DeviceNo % 10 + '0';
 155   1              
 156   1              // 添加了设备类型
 157   1              //
 158   1              memcpy(Data + tmpDataLen, "\",\"dt\":\"", 8);
 159   1              tmpDataLen += 8;
 160   1              Data[tmpDataLen++] = DeviceDataRecollect_Type / 100 % 10 + '0';
 161   1              Data[tmpDataLen++] = DeviceDataRecollect_Type / 10 % 10 + '0';
 162   1              Data[tmpDataLen++] = DeviceDataRecollect_Type % 10 + '0';
 163   1              
 164   1              // 添加数据
 165   1              //
 166   1              memcpy(Data + tmpDataLen, "\",\"data\":[", 10); tmpDataLen += 10;
 167   1              
 168   1              while (!MiddlewareData_IsEmpty(MiddlewareData_ReceiveDataNormal))
 169   1              {
 170   2                      uint8_t xdata *tmpData = MiddlewareData_Fetch(MiddlewareData_ReceiveDataNormal);
 171   2                      
 172   2                      uint8_t xdata tmpIndex;
 173   2                      
C51 COMPILER V9.54   MIDDLEWARE_DEVICEDATARECOLLECT                                        01/10/2017 18:08:21 PAGE 4   

 174   2                      for (tmpIndex = 0; tmpIndex < 22; tmpIndex++)
 175   2                      {
 176   3                              
 177   3                      }
 178   2                      
 179   2                      MiddlewareData_Free(MiddlewareData_ReceiveDataNormal);
 180   2              }
 181   1              
 182   1              // 负载长度字段
 183   1              //
 184   1              Data[2] = (tmpDataLen - 8) >> 8;
 185   1              
 186   1              Data[3] = (tmpDataLen - 8) ;
 187   1              
 188   1      //      Ch395_Write(peerSockfd, Data, tmpDataLen);
 189   1      }
 190          
 191          
 192          
 193          
 194          
 195          
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          
 207          
 208          
 209          
 210          
 211          
 212          
 213          
 214          
 215          
 216          
 217          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1584    ----
   CONSTANT SIZE    =     69    ----
   XDATA SIZE       =      3      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
